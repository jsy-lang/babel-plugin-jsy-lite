import jsyTranspileParser from './jsyBabelParser.jsy'

export default babel6_plugin_jsy_lite
export function babel6_plugin_jsy_lite(babel) ::
  return @{}
    name: 'babel-plugin-jsy-lite'

    manipulateOptions(opts, parserOpts, file) ::
      parserOpts.plugins.push @
        'asyncGenerators'
        'classProperties'
        'dynamicImport'
        'exportExtensions'
        'objectRestSpread'

      file.opts.parserOpts = parserOpts

      parserOpts.parser = (source, parserOpts) => ::
        let js_vanilla
        try ::
          js_vanilla = jsyTranspileParser @
            source, file.opts.filenameRelative

        catch err ::
          const src_loc = err.src_loc
          if undefined !== src_loc ::
            asBabylonSyntaxError(err, src_loc, source)
          throw err

        return parserOpts.parser.parse @
          js_vanilla, parserOpts

    pre(state, ... args) ::
      const check_blocks = asCheckBlocksFunction @ this.opts.check_blocks
      this.opts.do_check_blocks = check_blocks @ state.opts.filename

    visitor: blockIndentVisitors



export const blockIndentVisitors = @{}
  Program(path) ::
    if this.opts.do_check_blocks ::
      ensureConsistentBlockIndent(path, path.node.body)

  BlockStatement(path) ::
    if this.opts.do_check_blocks ::
      ensureConsistentBlockIndent(path, path.node.body)

  SwitchStatement(path) ::
    if this.opts.do_check_blocks ::
      ensureConsistentBlockIndent(path, path.node.cases)

  SwitchCase(path) ::
    if this.opts.do_check_blocks ::
      ensureConsistentBlockIndent(path, path.node.consequent)


export function ensureConsistentBlockIndent(path, body) ::
  if null == body :: body = path.node.body
  body = Array.from(body)
  if !body || !body.length :: return

  let prev_line, block_column=null
  for const child of body ::
    const loc = child.loc
    if !loc ::
      // A synthetic child often does not have a location.
      // Furthermore, a synthetic child indicates that something is mucking
      // around with the AST. Adapt by resetting block_column and enforcing
      // only across consecutive entries with valid locations.
      block_column = null
      continue
    else if null === block_column ::
      // assume the first location is indented properlyâ€¦
      block_column = loc.start.column

    if loc.start.line != prev_line && loc.start.column != block_column ::
      throw path.hub.file.buildCodeFrameError @ child,
          `Indent mismatch. (block: ${block_column}, statement: ${loc.start.column}). \n`
        + `    (From 'check_blocks' enforcement option of babel-plugin-jsy-lite)`

    prev_line = loc.end.line


const default_check_blocks = /\/node_modules\/|\\node_modules\\/ ;
export function asCheckBlocksFunction(check_blocks) ::
  if 'function' === typeof check_blocks ::
    return check_blocks

  const re = null == check_blocks ? default_check_blocks
    : 'string' === typeof check_blocks ? new RegExp(check_blocks)
    : check_blocks instanceof RegExp ? check_blocks
    : null

  if re ::
    return filename => ! re.test(filename)
  else return () => false


export function asBabylonSyntaxError(err, src_loc, code) ::
  const {pos, line, column} = src_loc
  err.pos = pos
  err.loc = @{} line, column
